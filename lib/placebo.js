// Generated by CoffeeScript 1.6.3
var axon, config, level, levels, method, send, socket, sugar, time, timers;

axon = require('axon');

socket = null;

timers = {};

config = {};

levels = {
  log: 0,
  debug: 0,
  system: 1,
  info: 2,
  warn: 3,
  warning: 3,
  error: 4
};

exports.configure = function(settings) {
  var key, value, _results;
  _results = [];
  for (key in settings) {
    value = settings[key];
    _results.push(config[key] = value);
  }
  return _results;
};

exports.connect = function(port, host, fn) {
  socket = axon.socket('push');
  socket.format('json');
  return socket.connect(port, host, fn);
};

send = exports.send = function(message, options) {
  var log, _ref;
  if (socket === null) {
    throw new Error("Placebo: service not connected");
  }
  log = {
    message: message,
    level: (_ref = options.level) != null ? _ref : config.level,
    color: options.color || config.color,
    time: options.time || Date.now(),
    server: options.server || config.server,
    process: options.process || config.process
  };
  if (log.level in levels) {
    log.level = levels[log.level];
  }
  return socket.send(log);
};

sugar = function(level, message, options) {
  if (options == null) {
    options = {};
  }
  options.level = level;
  return send(message, options);
};

for (method in levels) {
  level = levels[method];
  exports[method] = sugar.bind(null, level);
}

time = exports.time = function(flag) {
  var message;
  if (timers[flag]) {
    time = Date.now() - timers[flag] / 1000;
    message = [flag, ': ', time, 's'].join("");
    send(message, {
      level: -1
    });
    return delete timers[flag];
  } else {
    return timers[flag] = Date.now();
  }
};
